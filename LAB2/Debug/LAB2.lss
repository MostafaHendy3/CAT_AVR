
LAB2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000003fc  00000470  2**0
                  ALLOC, LOAD, DATA
  2 .stab         000005a0  00000000  00000000  00000470  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000cd0  00000000  00000000  00000a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000030  00000000  00000000  000016e0  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001710  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000052e  00000000  00000000  0000174c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004e7  00000000  00000000  00001c7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  00002161  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001af  00000000  00000000  0000217b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define PORTA *((u8 *)0x3b)
#define DDRA *((u8 *)0x3a)
#define PINA *((volatile u8 *)0x39)

int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	60 97       	sbiw	r28, 0x10	; 16
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61

	DDRA = 0xff;
  80:	8a e3       	ldi	r24, 0x3A	; 58
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	2f ef       	ldi	r18, 0xFF	; 255
  86:	30 e0       	ldi	r19, 0x00	; 0
  88:	fc 01       	movw	r30, r24
  8a:	31 83       	std	Z+1, r19	; 0x01
  8c:	20 83       	st	Z, r18
	PORTA =0x00;
  8e:	8b e3       	ldi	r24, 0x3B	; 59
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	fc 01       	movw	r30, r24
  94:	11 82       	std	Z+1, r1	; 0x01
  96:	10 82       	st	Z, r1
	while (1)
	{
		for(int i =0;i<8;i++){
  98:	1a 82       	std	Y+2, r1	; 0x02
  9a:	19 82       	std	Y+1, r1	; 0x01
  9c:	8c c0       	rjmp	.+280    	; 0x1b6 <main+0x14a>
			BIT_TOGGLE(PORTA,i);
  9e:	8b e3       	ldi	r24, 0x3B	; 59
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	fc 01       	movw	r30, r24
  a4:	20 81       	ld	r18, Z
  a6:	31 81       	ldd	r19, Z+1	; 0x01
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	09 80       	ldd	r0, Y+1	; 0x01
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <main+0x48>
  b0:	88 0f       	add	r24, r24
  b2:	99 1f       	adc	r25, r25
  b4:	0a 94       	dec	r0
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <main+0x44>
  b8:	ac 01       	movw	r20, r24
  ba:	8b e3       	ldi	r24, 0x3B	; 59
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	24 27       	eor	r18, r20
  c0:	35 27       	eor	r19, r21
  c2:	fc 01       	movw	r30, r24
  c4:	31 83       	std	Z+1, r19	; 0x01
  c6:	20 83       	st	Z, r18
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	a8 ec       	ldi	r26, 0xC8	; 200
  ce:	b2 e4       	ldi	r27, 0x42	; 66
  d0:	8b 83       	std	Y+3, r24	; 0x03
  d2:	9c 83       	std	Y+4, r25	; 0x04
  d4:	ad 83       	std	Y+5, r26	; 0x05
  d6:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
  d8:	20 e0       	ldi	r18, 0x00	; 0
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	4a e7       	ldi	r20, 0x7A	; 122
  de:	53 e4       	ldi	r21, 0x43	; 67
  e0:	6b 81       	ldd	r22, Y+3	; 0x03
  e2:	7c 81       	ldd	r23, Y+4	; 0x04
  e4:	8d 81       	ldd	r24, Y+5	; 0x05
  e6:	9e 81       	ldd	r25, Y+6	; 0x06
  e8:	0e 94 67 01 	call	0x2ce	; 0x2ce <__mulsf3>
  ec:	dc 01       	movw	r26, r24
  ee:	cb 01       	movw	r24, r22
  f0:	8f 83       	std	Y+7, r24	; 0x07
  f2:	98 87       	std	Y+8, r25	; 0x08
  f4:	a9 87       	std	Y+9, r26	; 0x09
  f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
  f8:	20 e0       	ldi	r18, 0x00	; 0
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	40 e8       	ldi	r20, 0x80	; 128
  fe:	5f e3       	ldi	r21, 0x3F	; 63
 100:	6f 81       	ldd	r22, Y+7	; 0x07
 102:	78 85       	ldd	r23, Y+8	; 0x08
 104:	89 85       	ldd	r24, Y+9	; 0x09
 106:	9a 85       	ldd	r25, Y+10	; 0x0a
 108:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <__cmpsf2>
 10c:	88 23       	and	r24, r24
 10e:	2c f4       	brge	.+10     	; 0x11a <main+0xae>
		__ticks = 1;
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	9c 87       	std	Y+12, r25	; 0x0c
 116:	8b 87       	std	Y+11, r24	; 0x0b
 118:	3f c0       	rjmp	.+126    	; 0x198 <main+0x12c>
	else if (__tmp > 65535)
 11a:	20 e0       	ldi	r18, 0x00	; 0
 11c:	3f ef       	ldi	r19, 0xFF	; 255
 11e:	4f e7       	ldi	r20, 0x7F	; 127
 120:	57 e4       	ldi	r21, 0x47	; 71
 122:	6f 81       	ldd	r22, Y+7	; 0x07
 124:	78 85       	ldd	r23, Y+8	; 0x08
 126:	89 85       	ldd	r24, Y+9	; 0x09
 128:	9a 85       	ldd	r25, Y+10	; 0x0a
 12a:	0e 94 62 01 	call	0x2c4	; 0x2c4 <__gesf2>
 12e:	18 16       	cp	r1, r24
 130:	4c f5       	brge	.+82     	; 0x184 <main+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 132:	20 e0       	ldi	r18, 0x00	; 0
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	40 e2       	ldi	r20, 0x20	; 32
 138:	51 e4       	ldi	r21, 0x41	; 65
 13a:	6b 81       	ldd	r22, Y+3	; 0x03
 13c:	7c 81       	ldd	r23, Y+4	; 0x04
 13e:	8d 81       	ldd	r24, Y+5	; 0x05
 140:	9e 81       	ldd	r25, Y+6	; 0x06
 142:	0e 94 67 01 	call	0x2ce	; 0x2ce <__mulsf3>
 146:	dc 01       	movw	r26, r24
 148:	cb 01       	movw	r24, r22
 14a:	bc 01       	movw	r22, r24
 14c:	cd 01       	movw	r24, r26
 14e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
 152:	dc 01       	movw	r26, r24
 154:	cb 01       	movw	r24, r22
 156:	9c 87       	std	Y+12, r25	; 0x0c
 158:	8b 87       	std	Y+11, r24	; 0x0b
 15a:	0f c0       	rjmp	.+30     	; 0x17a <main+0x10e>
 15c:	89 e1       	ldi	r24, 0x19	; 25
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	9e 87       	std	Y+14, r25	; 0x0e
 162:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 164:	8d 85       	ldd	r24, Y+13	; 0x0d
 166:	9e 85       	ldd	r25, Y+14	; 0x0e
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <main+0xfc>
 16c:	9e 87       	std	Y+14, r25	; 0x0e
 16e:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 170:	8b 85       	ldd	r24, Y+11	; 0x0b
 172:	9c 85       	ldd	r25, Y+12	; 0x0c
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	9c 87       	std	Y+12, r25	; 0x0c
 178:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 17a:	8b 85       	ldd	r24, Y+11	; 0x0b
 17c:	9c 85       	ldd	r25, Y+12	; 0x0c
 17e:	89 2b       	or	r24, r25
 180:	69 f7       	brne	.-38     	; 0x15c <main+0xf0>
 182:	14 c0       	rjmp	.+40     	; 0x1ac <main+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 184:	6f 81       	ldd	r22, Y+7	; 0x07
 186:	78 85       	ldd	r23, Y+8	; 0x08
 188:	89 85       	ldd	r24, Y+9	; 0x09
 18a:	9a 85       	ldd	r25, Y+10	; 0x0a
 18c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
 190:	dc 01       	movw	r26, r24
 192:	cb 01       	movw	r24, r22
 194:	9c 87       	std	Y+12, r25	; 0x0c
 196:	8b 87       	std	Y+11, r24	; 0x0b
 198:	8b 85       	ldd	r24, Y+11	; 0x0b
 19a:	9c 85       	ldd	r25, Y+12	; 0x0c
 19c:	98 8b       	std	Y+16, r25	; 0x10
 19e:	8f 87       	std	Y+15, r24	; 0x0f
 1a0:	8f 85       	ldd	r24, Y+15	; 0x0f
 1a2:	98 89       	ldd	r25, Y+16	; 0x10
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <main+0x138>
 1a8:	98 8b       	std	Y+16, r25	; 0x10
 1aa:	8f 87       	std	Y+15, r24	; 0x0f

	DDRA = 0xff;
	PORTA =0x00;
	while (1)
	{
		for(int i =0;i<8;i++){
 1ac:	89 81       	ldd	r24, Y+1	; 0x01
 1ae:	9a 81       	ldd	r25, Y+2	; 0x02
 1b0:	01 96       	adiw	r24, 0x01	; 1
 1b2:	9a 83       	std	Y+2, r25	; 0x02
 1b4:	89 83       	std	Y+1, r24	; 0x01
 1b6:	89 81       	ldd	r24, Y+1	; 0x01
 1b8:	9a 81       	ldd	r25, Y+2	; 0x02
 1ba:	08 97       	sbiw	r24, 0x08	; 8
 1bc:	0c f4       	brge	.+2      	; 0x1c0 <main+0x154>
 1be:	6f cf       	rjmp	.-290    	; 0x9e <main+0x32>
 1c0:	6b cf       	rjmp	.-298    	; 0x98 <main+0x2c>

000001c2 <__cmpsf2>:
 1c2:	0e 94 15 01 	call	0x22a	; 0x22a <__fp_cmp>
 1c6:	08 f4       	brcc	.+2      	; 0x1ca <__cmpsf2+0x8>
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	08 95       	ret

000001cc <__fixunssfsi>:
 1cc:	0e 94 41 01 	call	0x282	; 0x282 <__fp_splitA>
 1d0:	88 f0       	brcs	.+34     	; 0x1f4 <__fixunssfsi+0x28>
 1d2:	9f 57       	subi	r25, 0x7F	; 127
 1d4:	98 f0       	brcs	.+38     	; 0x1fc <__fixunssfsi+0x30>
 1d6:	b9 2f       	mov	r27, r25
 1d8:	99 27       	eor	r25, r25
 1da:	b7 51       	subi	r27, 0x17	; 23
 1dc:	b0 f0       	brcs	.+44     	; 0x20a <__EEPROM_REGION_LENGTH__+0xa>
 1de:	e1 f0       	breq	.+56     	; 0x218 <__EEPROM_REGION_LENGTH__+0x18>
 1e0:	66 0f       	add	r22, r22
 1e2:	77 1f       	adc	r23, r23
 1e4:	88 1f       	adc	r24, r24
 1e6:	99 1f       	adc	r25, r25
 1e8:	1a f0       	brmi	.+6      	; 0x1f0 <__fixunssfsi+0x24>
 1ea:	ba 95       	dec	r27
 1ec:	c9 f7       	brne	.-14     	; 0x1e0 <__fixunssfsi+0x14>
 1ee:	14 c0       	rjmp	.+40     	; 0x218 <__EEPROM_REGION_LENGTH__+0x18>
 1f0:	b1 30       	cpi	r27, 0x01	; 1
 1f2:	91 f0       	breq	.+36     	; 0x218 <__EEPROM_REGION_LENGTH__+0x18>
 1f4:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <__fp_zero>
 1f8:	b1 e0       	ldi	r27, 0x01	; 1
 1fa:	08 95       	ret
 1fc:	0c 94 5b 01 	jmp	0x2b6	; 0x2b6 <__fp_zero>
 200:	67 2f       	mov	r22, r23
 202:	78 2f       	mov	r23, r24
 204:	88 27       	eor	r24, r24
 206:	b8 5f       	subi	r27, 0xF8	; 248
 208:	39 f0       	breq	.+14     	; 0x218 <__EEPROM_REGION_LENGTH__+0x18>
 20a:	b9 3f       	cpi	r27, 0xF9	; 249
 20c:	cc f3       	brlt	.-14     	; 0x200 <__EEPROM_REGION_LENGTH__>
 20e:	86 95       	lsr	r24
 210:	77 95       	ror	r23
 212:	67 95       	ror	r22
 214:	b3 95       	inc	r27
 216:	d9 f7       	brne	.-10     	; 0x20e <__EEPROM_REGION_LENGTH__+0xe>
 218:	3e f4       	brtc	.+14     	; 0x228 <__EEPROM_REGION_LENGTH__+0x28>
 21a:	90 95       	com	r25
 21c:	80 95       	com	r24
 21e:	70 95       	com	r23
 220:	61 95       	neg	r22
 222:	7f 4f       	sbci	r23, 0xFF	; 255
 224:	8f 4f       	sbci	r24, 0xFF	; 255
 226:	9f 4f       	sbci	r25, 0xFF	; 255
 228:	08 95       	ret

0000022a <__fp_cmp>:
 22a:	99 0f       	add	r25, r25
 22c:	00 08       	sbc	r0, r0
 22e:	55 0f       	add	r21, r21
 230:	aa 0b       	sbc	r26, r26
 232:	e0 e8       	ldi	r30, 0x80	; 128
 234:	fe ef       	ldi	r31, 0xFE	; 254
 236:	16 16       	cp	r1, r22
 238:	17 06       	cpc	r1, r23
 23a:	e8 07       	cpc	r30, r24
 23c:	f9 07       	cpc	r31, r25
 23e:	c0 f0       	brcs	.+48     	; 0x270 <__fp_cmp+0x46>
 240:	12 16       	cp	r1, r18
 242:	13 06       	cpc	r1, r19
 244:	e4 07       	cpc	r30, r20
 246:	f5 07       	cpc	r31, r21
 248:	98 f0       	brcs	.+38     	; 0x270 <__fp_cmp+0x46>
 24a:	62 1b       	sub	r22, r18
 24c:	73 0b       	sbc	r23, r19
 24e:	84 0b       	sbc	r24, r20
 250:	95 0b       	sbc	r25, r21
 252:	39 f4       	brne	.+14     	; 0x262 <__fp_cmp+0x38>
 254:	0a 26       	eor	r0, r26
 256:	61 f0       	breq	.+24     	; 0x270 <__fp_cmp+0x46>
 258:	23 2b       	or	r18, r19
 25a:	24 2b       	or	r18, r20
 25c:	25 2b       	or	r18, r21
 25e:	21 f4       	brne	.+8      	; 0x268 <__fp_cmp+0x3e>
 260:	08 95       	ret
 262:	0a 26       	eor	r0, r26
 264:	09 f4       	brne	.+2      	; 0x268 <__fp_cmp+0x3e>
 266:	a1 40       	sbci	r26, 0x01	; 1
 268:	a6 95       	lsr	r26
 26a:	8f ef       	ldi	r24, 0xFF	; 255
 26c:	81 1d       	adc	r24, r1
 26e:	81 1d       	adc	r24, r1
 270:	08 95       	ret

00000272 <__fp_split3>:
 272:	57 fd       	sbrc	r21, 7
 274:	90 58       	subi	r25, 0x80	; 128
 276:	44 0f       	add	r20, r20
 278:	55 1f       	adc	r21, r21
 27a:	59 f0       	breq	.+22     	; 0x292 <__fp_splitA+0x10>
 27c:	5f 3f       	cpi	r21, 0xFF	; 255
 27e:	71 f0       	breq	.+28     	; 0x29c <__fp_splitA+0x1a>
 280:	47 95       	ror	r20

00000282 <__fp_splitA>:
 282:	88 0f       	add	r24, r24
 284:	97 fb       	bst	r25, 7
 286:	99 1f       	adc	r25, r25
 288:	61 f0       	breq	.+24     	; 0x2a2 <__fp_splitA+0x20>
 28a:	9f 3f       	cpi	r25, 0xFF	; 255
 28c:	79 f0       	breq	.+30     	; 0x2ac <__fp_splitA+0x2a>
 28e:	87 95       	ror	r24
 290:	08 95       	ret
 292:	12 16       	cp	r1, r18
 294:	13 06       	cpc	r1, r19
 296:	14 06       	cpc	r1, r20
 298:	55 1f       	adc	r21, r21
 29a:	f2 cf       	rjmp	.-28     	; 0x280 <__fp_split3+0xe>
 29c:	46 95       	lsr	r20
 29e:	f1 df       	rcall	.-30     	; 0x282 <__fp_splitA>
 2a0:	08 c0       	rjmp	.+16     	; 0x2b2 <__fp_splitA+0x30>
 2a2:	16 16       	cp	r1, r22
 2a4:	17 06       	cpc	r1, r23
 2a6:	18 06       	cpc	r1, r24
 2a8:	99 1f       	adc	r25, r25
 2aa:	f1 cf       	rjmp	.-30     	; 0x28e <__fp_splitA+0xc>
 2ac:	86 95       	lsr	r24
 2ae:	71 05       	cpc	r23, r1
 2b0:	61 05       	cpc	r22, r1
 2b2:	08 94       	sec
 2b4:	08 95       	ret

000002b6 <__fp_zero>:
 2b6:	e8 94       	clt

000002b8 <__fp_szero>:
 2b8:	bb 27       	eor	r27, r27
 2ba:	66 27       	eor	r22, r22
 2bc:	77 27       	eor	r23, r23
 2be:	cb 01       	movw	r24, r22
 2c0:	97 f9       	bld	r25, 7
 2c2:	08 95       	ret

000002c4 <__gesf2>:
 2c4:	0e 94 15 01 	call	0x22a	; 0x22a <__fp_cmp>
 2c8:	08 f4       	brcc	.+2      	; 0x2cc <__gesf2+0x8>
 2ca:	8f ef       	ldi	r24, 0xFF	; 255
 2cc:	08 95       	ret

000002ce <__mulsf3>:
 2ce:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <__mulsf3x>
 2d2:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__fp_round>
 2d6:	0e 94 dd 01 	call	0x3ba	; 0x3ba <__fp_pscA>
 2da:	38 f0       	brcs	.+14     	; 0x2ea <__mulsf3+0x1c>
 2dc:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <__fp_pscB>
 2e0:	20 f0       	brcs	.+8      	; 0x2ea <__mulsf3+0x1c>
 2e2:	95 23       	and	r25, r21
 2e4:	11 f0       	breq	.+4      	; 0x2ea <__mulsf3+0x1c>
 2e6:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__fp_inf>
 2ea:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__fp_nan>
 2ee:	11 24       	eor	r1, r1
 2f0:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__fp_szero>

000002f4 <__mulsf3x>:
 2f4:	0e 94 39 01 	call	0x272	; 0x272 <__fp_split3>
 2f8:	70 f3       	brcs	.-36     	; 0x2d6 <__mulsf3+0x8>

000002fa <__mulsf3_pse>:
 2fa:	95 9f       	mul	r25, r21
 2fc:	c1 f3       	breq	.-16     	; 0x2ee <__mulsf3+0x20>
 2fe:	95 0f       	add	r25, r21
 300:	50 e0       	ldi	r21, 0x00	; 0
 302:	55 1f       	adc	r21, r21
 304:	62 9f       	mul	r22, r18
 306:	f0 01       	movw	r30, r0
 308:	72 9f       	mul	r23, r18
 30a:	bb 27       	eor	r27, r27
 30c:	f0 0d       	add	r31, r0
 30e:	b1 1d       	adc	r27, r1
 310:	63 9f       	mul	r22, r19
 312:	aa 27       	eor	r26, r26
 314:	f0 0d       	add	r31, r0
 316:	b1 1d       	adc	r27, r1
 318:	aa 1f       	adc	r26, r26
 31a:	64 9f       	mul	r22, r20
 31c:	66 27       	eor	r22, r22
 31e:	b0 0d       	add	r27, r0
 320:	a1 1d       	adc	r26, r1
 322:	66 1f       	adc	r22, r22
 324:	82 9f       	mul	r24, r18
 326:	22 27       	eor	r18, r18
 328:	b0 0d       	add	r27, r0
 32a:	a1 1d       	adc	r26, r1
 32c:	62 1f       	adc	r22, r18
 32e:	73 9f       	mul	r23, r19
 330:	b0 0d       	add	r27, r0
 332:	a1 1d       	adc	r26, r1
 334:	62 1f       	adc	r22, r18
 336:	83 9f       	mul	r24, r19
 338:	a0 0d       	add	r26, r0
 33a:	61 1d       	adc	r22, r1
 33c:	22 1f       	adc	r18, r18
 33e:	74 9f       	mul	r23, r20
 340:	33 27       	eor	r19, r19
 342:	a0 0d       	add	r26, r0
 344:	61 1d       	adc	r22, r1
 346:	23 1f       	adc	r18, r19
 348:	84 9f       	mul	r24, r20
 34a:	60 0d       	add	r22, r0
 34c:	21 1d       	adc	r18, r1
 34e:	82 2f       	mov	r24, r18
 350:	76 2f       	mov	r23, r22
 352:	6a 2f       	mov	r22, r26
 354:	11 24       	eor	r1, r1
 356:	9f 57       	subi	r25, 0x7F	; 127
 358:	50 40       	sbci	r21, 0x00	; 0
 35a:	9a f0       	brmi	.+38     	; 0x382 <__mulsf3_pse+0x88>
 35c:	f1 f0       	breq	.+60     	; 0x39a <__mulsf3_pse+0xa0>
 35e:	88 23       	and	r24, r24
 360:	4a f0       	brmi	.+18     	; 0x374 <__mulsf3_pse+0x7a>
 362:	ee 0f       	add	r30, r30
 364:	ff 1f       	adc	r31, r31
 366:	bb 1f       	adc	r27, r27
 368:	66 1f       	adc	r22, r22
 36a:	77 1f       	adc	r23, r23
 36c:	88 1f       	adc	r24, r24
 36e:	91 50       	subi	r25, 0x01	; 1
 370:	50 40       	sbci	r21, 0x00	; 0
 372:	a9 f7       	brne	.-22     	; 0x35e <__mulsf3_pse+0x64>
 374:	9e 3f       	cpi	r25, 0xFE	; 254
 376:	51 05       	cpc	r21, r1
 378:	80 f0       	brcs	.+32     	; 0x39a <__mulsf3_pse+0xa0>
 37a:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__fp_inf>
 37e:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__fp_szero>
 382:	5f 3f       	cpi	r21, 0xFF	; 255
 384:	e4 f3       	brlt	.-8      	; 0x37e <__mulsf3_pse+0x84>
 386:	98 3e       	cpi	r25, 0xE8	; 232
 388:	d4 f3       	brlt	.-12     	; 0x37e <__mulsf3_pse+0x84>
 38a:	86 95       	lsr	r24
 38c:	77 95       	ror	r23
 38e:	67 95       	ror	r22
 390:	b7 95       	ror	r27
 392:	f7 95       	ror	r31
 394:	e7 95       	ror	r30
 396:	9f 5f       	subi	r25, 0xFF	; 255
 398:	c1 f7       	brne	.-16     	; 0x38a <__mulsf3_pse+0x90>
 39a:	fe 2b       	or	r31, r30
 39c:	88 0f       	add	r24, r24
 39e:	91 1d       	adc	r25, r1
 3a0:	96 95       	lsr	r25
 3a2:	87 95       	ror	r24
 3a4:	97 f9       	bld	r25, 7
 3a6:	08 95       	ret

000003a8 <__fp_inf>:
 3a8:	97 f9       	bld	r25, 7
 3aa:	9f 67       	ori	r25, 0x7F	; 127
 3ac:	80 e8       	ldi	r24, 0x80	; 128
 3ae:	70 e0       	ldi	r23, 0x00	; 0
 3b0:	60 e0       	ldi	r22, 0x00	; 0
 3b2:	08 95       	ret

000003b4 <__fp_nan>:
 3b4:	9f ef       	ldi	r25, 0xFF	; 255
 3b6:	80 ec       	ldi	r24, 0xC0	; 192
 3b8:	08 95       	ret

000003ba <__fp_pscA>:
 3ba:	00 24       	eor	r0, r0
 3bc:	0a 94       	dec	r0
 3be:	16 16       	cp	r1, r22
 3c0:	17 06       	cpc	r1, r23
 3c2:	18 06       	cpc	r1, r24
 3c4:	09 06       	cpc	r0, r25
 3c6:	08 95       	ret

000003c8 <__fp_pscB>:
 3c8:	00 24       	eor	r0, r0
 3ca:	0a 94       	dec	r0
 3cc:	12 16       	cp	r1, r18
 3ce:	13 06       	cpc	r1, r19
 3d0:	14 06       	cpc	r1, r20
 3d2:	05 06       	cpc	r0, r21
 3d4:	08 95       	ret

000003d6 <__fp_round>:
 3d6:	09 2e       	mov	r0, r25
 3d8:	03 94       	inc	r0
 3da:	00 0c       	add	r0, r0
 3dc:	11 f4       	brne	.+4      	; 0x3e2 <__fp_round+0xc>
 3de:	88 23       	and	r24, r24
 3e0:	52 f0       	brmi	.+20     	; 0x3f6 <__fp_round+0x20>
 3e2:	bb 0f       	add	r27, r27
 3e4:	40 f4       	brcc	.+16     	; 0x3f6 <__fp_round+0x20>
 3e6:	bf 2b       	or	r27, r31
 3e8:	11 f4       	brne	.+4      	; 0x3ee <__fp_round+0x18>
 3ea:	60 ff       	sbrs	r22, 0
 3ec:	04 c0       	rjmp	.+8      	; 0x3f6 <__fp_round+0x20>
 3ee:	6f 5f       	subi	r22, 0xFF	; 255
 3f0:	7f 4f       	sbci	r23, 0xFF	; 255
 3f2:	8f 4f       	sbci	r24, 0xFF	; 255
 3f4:	9f 4f       	sbci	r25, 0xFF	; 255
 3f6:	08 95       	ret

000003f8 <_exit>:
 3f8:	f8 94       	cli

000003fa <__stop_program>:
 3fa:	ff cf       	rjmp	.-2      	; 0x3fa <__stop_program>
